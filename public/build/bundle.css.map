{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport FeedMe from 'feedme'\n\timport http from 'http'\n\timport striptags from 'striptags'\n\timport subscriptions from '../subscriptions.json'\n\n  // Some RSS feeds can't be loaded in the browser due to CORS security.\n  // To get around this, you can use a proxy.\n\tconst CORS_PROXY = 'https://cors-anywhere.herokuapp.com/'\n\tconst DESCRIPTION_LENGTH = 500\n\tconst ALLOWED_TAGS = ['a', 'img', 'strong', 'picture', 'figure', 'figcaption']\n\n\tfetch(CORS_PROXY + subscriptions.list[3])\n\t\t// Retrieve its body as ReadableStream\n\t\t.then(response => response.text())\n\t\t.then(body => {\n\t\t\tconsole.log('FETCHED:', CORS_PROXY + subscriptions.list[3])\n\t\t\tlet itemCount = 0\n\t\t\tconst feed = {\n\t\t\t\titems: []\n\t\t\t}\n\n\t\t\tconst parser = new FeedMe(true)\n\t\t\tparser.on('title', (title) => {\n\t\t\t\tfeed.title = title\n\t\t\t})\n\t\t\tparser.on('item', (item) => {\n\t\t\t\t// console.log(item.title)\n\t\t\t\tfeed.items.push(item)\n\t\t\t\titemCount++\n\t\t\t\tif (itemCount === 5) {\n\t\t\t\t\tconsole.log(feed)\n\t\t\t\t}\n\t\t\t})\n\t\t\tparser.on('link', (link) => {\n\t\t\t\tif (typeof link === 'object' && link.rel === 'alternate') {\n\t\t\t\t\tfeed.link = link.href\n\t\t\t\t} else if (typeof link === 'string') {\n\t\t\t\t\tfeed.link = link\n\t\t\t\t}\n\t\t\t})\n\t\t\tparser.on('home_page_url', (link) => {\n\t\t\t\tfeed.link = parsedFeed.home_page_url\n\t\t\t})\n\n\t\t\tconst onUpdatedDate = (date) => {\n\t\t\t\tfeed.updated = date\n\t\t\t}\n\t\t\tparser.once('pubdate', onUpdatedDate)\n\t\t\tparser.once('lastbuilddate', onUpdatedDate)\n\t\t\tparser.once('updated', onUpdatedDate)\n\t\t\tparser.on('end', () => {\n\t\t\t\tconsole.log('_____ENDEND___')\n\t\t\t\tconst parsedFeed = parser.done()\n\t\t\t\tconsole.log('PARSER DONE', parsedFeed)\n\t\t\t})\n\t\t\tparser.write(body)\n\t\t})\n\n\tlet allEntries = []\n\n\tfunction getFeedData (url) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\thttp.get(CORS_PROXY + url, (res) => {\n\t\t\t\tif (res.statusCode !== 200) {\n\t\t\t\t\tconst err = new Error(`${url} returned status code ${res.statusCode}`)\n\t\t\t\t\treject(err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tconst parser = new FeedMe(true)\n\t\t\t\t// parser.on('title', (title) => {\n\t\t\t\t// \tfeed.title = title\n\t\t\t\t// })\n\t\t\t\t// parser.on('item', (item) => {\n\t\t\t\t// \tfeed.items.push(item)\n\t\t\t\t// })\n\t\t\t\t// Try to get date from one of the fields.\n\t\t\t\t// parser.once('pubdate', getdate)\n\t\t\t\t// parser.once('lastbuilddate', getdate)\n\t\t\t\t// parser.once('updated', getdate)\n\t\t\t\tparser.on('error', (err) => reject(err))\n\t\t\t\tparser.on('end', () => {\n\t\t\t\t\tconsole.log(`Finished parsing feed ${url}`)\n\t\t\t\t\tconst parsedFeed = parser.done()\n\n\t\t\t\t\tconst feed = {}\n\t\t\t\t\tfeed.items = parsedFeed.items.slice(0, 10)\n\t\t\t\t\tfeed.title = parsedFeed.title\n\t\t\t\n\t\t\t\t\tif (parsedFeed.link && typeof parsedFeed.link === 'object' && parsedFeed.link[0] && parsedFeed.link[0].rel === 'alternate') {\n\t\t\t\t\t\tfeed.link = parsedFeed.link[0].href\n\t\t\t\t\t} else if (parsedFeed.link && typeof parsedFeed.link === 'string') {\n\t\t\t\t\t\tfeed.link = parsedFeed.link\n\t\t\t\t\t}\n\n\t\t\t\t\tif (parsedFeed.home_page_url) {\n\t\t\t\t\t\tfeed.link = parsedFeed.home_page_url\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(feed)\n\t\t\t\t})\n\t\t\t\tres.pipe(parser)\n\t\t\t})\n\t\t})\t\t\n\t}\n\t\n\tfunction sortFeedsByDate () {\n\t\tallEntries.sort((a, b) => (a.unixTime < b.unixTime) ? 1 : -1)\n\t}\n\n\tfunction unixToHumanDate (unixTime) {\n\t\tconst date = new Date(unixTime)\n\t\tconst year = date.getFullYear()\n\t\tconst month = date.getMonth()\n\t\tconst day = date.getDate()\n\t\tconst hours = date.getHours()\n\t\tconst minutes = '0' + date.getMinutes()\n\t\tconst seconds = '0' + date.getSeconds()\n\n \t\tconst humanTimestamp = day + '.' + month + '.' + year + ' ' + hours + ':' + minutes.substr(-2)\n\t\treturn humanTimestamp\n\t}\n\n  async function parseFeeds (feedList) {\n\t\tconsole.log('Loading your subscriptions...')\n\t\tconsole.log(feedList)\n    feedList.forEach(feedURL => {\n\t\t\tgetFeedData(CORS_PROXY + feedURL)\n\t\t\t\t.then(feed => {\n\t\t\t\t\tconst currentFeedEntries = parseSingleFeed(feed)\n\t\t\t\t\tallEntries = [...allEntries, ...currentFeedEntries]\n\t\t\t\t\tsortFeedsByDate()\n\t\t\t\t})\n\t\t\t\t.catch(err => console.error(err))\n\t\t})\n  }\n\n  function parseSingleFeed (feed) {\n\t\tconst entries = []\n\n    feed.items.forEach(item => {\n      const entry = {\n\t\t\t\tfeed: {\n\t\t\t\t\ttitle: feed.title,\n\t\t\t\t\tlink: feed.link\n\t\t\t\t},\n        title: item.title ? item.title : null,\n        pubDate: item.updated || item.pubdate || item.date_published\n\t\t\t}\n\n\t\t\tif (item.url) {\n\t\t\t\tentry.link = item.url\n\t\t\t}\n\t\n\t\t\tif (item.link) {\n\t\t\t\tentry.link = item.link\n\t\t\t}\n\n\t\t\tif (item.link && item.link.href) {\n\t\t\t\tentry.link = item.link.href\n\t\t\t}\n\n\t\t\tif (Array.isArray(item.link)) {\n\t\t\t\titem.link.forEach((url) => {\n\t\t\t\t\tif (url.rel === 'alternate') {\n\t\t\t\t\t\tentry.link = url.href\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\t\n\t\t\tif (item.content) {\n\t\t\t\tentry.excerpt = item.content.substring(0, DESCRIPTION_LENGTH)\n\t\t\t}\n\n\t\t\tif (item.description) {\n\t\t\t\tentry.excerpt = item.description.substring(0, DESCRIPTION_LENGTH)\n\t\t\t}\n\n\t\t\tif (item.content_html) {\n\t\t\t\tentry.excerpt = item.content_html.substring(0, DESCRIPTION_LENGTH)\n\t\t\t}\n\n\t\t\tif (entry.excerpt) {\n\t\t\t\tentry.excerpt = entry.excerpt.replace(/style=\"[^\"]*\"/, '')\n\t\t\t\tentry.excerpt = striptags(entry.excerpt, ALLOWED_TAGS);\n\t\t\t}\n\n\t\t\tentry.unixTime = new Date(entry.pubDate).valueOf()\n\t\t\tentry.humanTimestamp = new Date(entry.pubDate)\n\n\t\t\tentries.push(entry)\n\t\t})\n\n\t\t// console.log(entries)\n\n\t\treturn entries\n  }\n\n\t// parseFeeds(subscriptions.list)\n</script>\n\n<style>\n  main {\n    font-family: 'Avenir Next', Avenir, '-apple-system', Helvetica, Arial, sans-serif;\n\t\tmax-width: 600px;\n\t\tmargin: auto;\n  }\n\n\t.solar-mars-title {\n\t\tmargin-top: 20px;\n\t\tmargin-bottom: 50px;\n\t\tcolor: var(--hot-pink);\n\t}\n\n\t.solar-mars-title svg {\n\t\tvertical-align: text-bottom;\n\t\tdisplay: inline-block;\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tfill: currentColor;\n\t}\n\n\tarticle {\n\t\tmargin-bottom: 70px;\n\t}\n\n\tarticle header {\n\t\tmargin-bottom: 15px;\n\t}\n\n\tarticle header h2 {\n\t\tfont-size: 16px;\n\t\tfont-weight: normal;\n\t\tmargin-bottom: 2px;\n\t}\n\n\tarticle header h2 a {\n\t\tcolor: var( --mid-gray);\n\t\ttext-decoration: none;\n\t}\n\n\tarticle header h1 {\n\t\tfont-size: 20px;\n\t}\n\n\tarticle header h1 a {\n\t\tcolor: var(--dark-gray);\n\t\ttext-decoration: none;\n\t}\n\n\t.entry-content {\n\t\tfont-size: 18px;\n\t\tmargin-bottom: 15px;\n\t}\n\n\t.entry-content :global(a) {\n\t\tcolor: var(--pink);\n\t}\n\n\t.entry-content :global(img) {\n\t\tmargin: 1em 0;\n\t}\n\n\tdate {\n\t\tdisplay: block;\n\t\tfont-size: 12px;\n\t\tfont-weight: 500;\n\t}\n\n\tdate a {\n\t\tcolor: var(--gray);\n\t\ttext-decoration: none;\n\t}\n</style>\n\n<main>\n  <h1 class=\"solar-mars-title\">\n\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"150\" height=\"190\" viewBox=\"0 0 150 190\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M119.67 66.736c-1.361.905-33.158 21.516-33.158 21.516L74.604 71.437s31.613-21.809 32.905-22.676c7.204-4.835 18.293 13.904 12.161 17.975zm-3.955-10.123c-3.782-6.552-9.222-3.529-5.192 3.45 3.681 6.375 8.96 3.077 5.192-3.45zM72.738 75.906l7.202 13.899-23.913 16.6-8.864-12.284 4.894-3.486-3.692-3.924-6.379 3.536-5.382-7.543 25.67-17.126 4.803 7.35-8.524 6.319 2.705 4.836 11.48-8.177zM46.12 99.673l3.755 7.549-13.738 9.784-7.607-10.036 5.447-4.215 4.505 2.888 7.638-5.97zM81.962 96.6l24.28 48.266-5.32 2.459-17.674-29.847-11.698.668-18.692 28.868-5.164-1.61 21.241-41.075L81.962 96.6zm-1.577 50.456h-6.676l-.994-22.955h9.346l-1.676 22.955z\"/></svg>\n\t\tSolar Mars\n\t</h1>\n\n\t{#each allEntries as entry}\n\t\t<article>\n\t\t\t<header>\n\t\t\t\t{#if entry.feed.title}\n\t\t\t\t\t<h2><a href=\"{entry.feed.link}\">{entry.feed.title}</a></h2>\n\t\t\t\t{/if}\n\t\t\t\t{#if entry.title}\n\t\t\t\t\t<h1><a href=\"{entry.link}\">{entry.title}</a></h1>\n\t\t\t\t{/if}\n\t\t\t</header>\n\t\t\t<div class=\"entry-content\">\n\t\t\t\t{@html entry.excerpt}...\n\t\t\t</div>\n\t\t\t<date>\n\t\t\t\t<a class=\"pink\" href=\"{entry.link}\">â†’ {unixToHumanDate(entry.pubDate)}</a>\n\t\t\t</date>\n\t\t</article>\n\t{:else}\n\t\tLoading...\n\t{/each}\n</main>\n"
  ],
  "names": [],
  "mappings": "AA0ME,IAAI,8BAAC,CAAC,AACJ,WAAW,CAAE,aAAa,CAAC,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CACnF,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,AACZ,CAAC,AAEF,iBAAiB,8BAAC,CAAC,AAClB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,IAAI,UAAU,CAAC,AACvB,CAAC,AAED,gCAAiB,CAAC,GAAG,eAAC,CAAC,AACtB,cAAc,CAAE,WAAW,CAC3B,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,YAAY,AACnB,CAAC,AAED,OAAO,8BAAC,CAAC,AACR,aAAa,CAAE,IAAI,AACpB,CAAC,AAED,sBAAO,CAAC,MAAM,eAAC,CAAC,AACf,aAAa,CAAE,IAAI,AACpB,CAAC,AAED,sBAAO,CAAC,MAAM,CAAC,EAAE,eAAC,CAAC,AAClB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,MAAM,CACnB,aAAa,CAAE,GAAG,AACnB,CAAC,AAED,sBAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,eAAC,CAAC,AACpB,KAAK,CAAE,KAAK,UAAU,CAAC,CACvB,eAAe,CAAE,IAAI,AACtB,CAAC,AAED,sBAAO,CAAC,MAAM,CAAC,EAAE,eAAC,CAAC,AAClB,SAAS,CAAE,IAAI,AAChB,CAAC,AAED,sBAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,eAAC,CAAC,AACpB,KAAK,CAAE,IAAI,WAAW,CAAC,CACvB,eAAe,CAAE,IAAI,AACtB,CAAC,AAED,cAAc,8BAAC,CAAC,AACf,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,IAAI,AACpB,CAAC,AAED,4CAAc,CAAC,AAAQ,CAAC,AAAE,CAAC,AAC1B,KAAK,CAAE,IAAI,MAAM,CAAC,AACnB,CAAC,AAED,4CAAc,CAAC,AAAQ,GAAG,AAAE,CAAC,AAC5B,MAAM,CAAE,GAAG,CAAC,CAAC,AACd,CAAC,AAED,IAAI,8BAAC,CAAC,AACL,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,AACjB,CAAC,AAED,mBAAI,CAAC,CAAC,eAAC,CAAC,AACP,KAAK,CAAE,IAAI,MAAM,CAAC,CAClB,eAAe,CAAE,IAAI,AACtB,CAAC"
}